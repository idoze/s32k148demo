/**
@defgroup ic_pal Input Capture - Peripheral Abstraction Layer (IC PAL)
@brief The S32 SDK provides a Peripheral Abstraction Layer for the input capture mode of S32 SDK devices.
<p>
  The IC PAL driver allows to detect the input signal and measure pulse width or period of the channel input signal.
  It was designed to be portable across all platforms and IPs which support FTM and eMIOS.
</p>

  ## How to integrate IC PAL in your application ##
<p>
  Unlike the other drivers, IC PAL modules need to include a configuration
  file named ic_pal_cfg.h, which allows the user to specify which IPs are used.
  The following code example shows how to configure one instance for each
  available IC IPs.
</p>

 @code
 #ifndef IC_PAL_CFG_H
 #define IC_PAL_CFG_H

 /* Define which IP instance will be used in current project */
 #define IC_PAL_S32K1xx

 #endif /* IC_PAL_CFG_H */
 @endcode

 The following table contains the matching between platforms and available IPs
    IP/MCU     |S32K142|S32K144|S32K146|S32K148|MPC5748G|MPC5746C|
 -------------:|:-----:|:-----:|:-----:|:-----:|:------:|:-------|
 FTM_IC        |  YES  |  YES  |  YES  |  YES  |   NO   |   NO   |
 eMIOS_IC      |  NO   |  NO   |  NO   |  NO   |   YES  |   YES  |
<p>

  ## Features ##
   - Start timer channel counting with period in ticks function
   - Start/stop the channel in the input capture mode
   - Get the measured value in ticks for the detection or measurement

  ## Functionality ##

  ### Initialization ###
<p>
  In order to use the IC PAL driver it must be first initialized, using IC_Init() function.
  Once initialized, it should be de-initialized before initialized again for the same IC module instance,
  using IC_Deinit(). The initialization function does the following operations:
    - sets the clock source, clock prescaler
    - sets the number of channel input capture are used
    - configures in the input capture mode for detection or measurement signal

### Example: ###
</p>
 @code
    /*! The instance number is used */
    #define INST_IC_PAL1 0U

    ic_input_ch_param_t icPalChnConfig[1] =
    {
      {
        .hwChannelId      = 0U,                    /*!< Physical hardware channel ID */
        .inputCaptureMode = IC_DETECT_RISING_EDGE, /*!< Input capture mode of operation */
        .filterEn         = false,                 /*!< Input capture filter state */
        .filterValue      = 0U,                    /*!< Filter Value */
        .channelExtension = &ftmChnExtension0,     /*!< The IP specific configuration structure for channel */
      }
    };

    channel_extension_ftm_for_ic_t ftmChnExtension0 =
    {
        .continuousModeEn = true    /*!< Continuous measurement state */
    };

    extension_ftm_for_ic_t ftmExtensionConfig =
    {
        .ftmClockSource = FTM_CLOCK_SOURCE_SYSTEMCLK,    /*!< Select clock source for FTM */
        .ftmPrescaler   = FTM_CLOCK_DIVID_BY_1           /*!< Register pre-scaler options available in the
                                                          *   ftm_clock_ps_t enumeration */
    };

    ic_config_t icPal1_InitConfig =
    {
        .nNumChannels  = 1U,                         /*!< Number of input capture channel used */
        .inputChConfig = icPalChnConfig,             /*!< Input capture channels configuration */
        .extension     = &ftmExtensionConfig         /*!< IP specific configuration structure */
    };

    /* Initialize input capture mode */
    IC_Init(INST_IC_PAL1, &icPal1_InitConfig);
 @endcode

  ### De-initialize a input capture instance ###
<p>
 This function will disable the input capture mode. The driver can't be used again until reinitialized.
 All register are reset to default value and counter is stopped.
### Example: ###
</p>
 @code
    /* De-initialize input capture mode */
    IC_Deinit(INST_IC_PAL1);
 @endcode

  ### Start the channel in the input capture mode ###
<p>
 This function will set the channel is in the input capture mode.
### Example: ###
</p>
 @code
    uint8_t hwChannel = icPal1_InitConfig.inputChConfig[0].hwChannelId;

    /* Start channel in the input capture mode */
    IC_StartChannel(INST_IC_PAL1, hwChannel);
 @endcode

  ### Stop the channel in the input capture mode ###
<p>
 This function will set the channel is used in GPIO mode or other peripheral.
### Example: ###
</p>
 @code
    uint8_t hwChannel = icPal1_InitConfig.inputChConfig[0].hwChannelId;

    /* Stop channel in the input capture mode */
    IC_StopChannel(INST_IC_PAL1, hwChannel);
 @endcode

  ### Get the measured value ###
<p>
  The pulse width measurement and the period measurement can be made after the channel input is in the
  input capture mode. The value is last captured by count.
  Note that to get true value of measurement at the first of pulse, please use the IC_GetValueMeasurement function in interrupt.
### Example: ###
</p>
 @code
    uint16_t retResult = 0U;
    uint8_t hwChannel = icPal1_InitConfig.inputChConfig[0].hwChannelId;

    /* Get the last captured value */
    retResult = IC_GetMeasurement(INST_IC_PAL1, hwChannel);
 @endcode

  ## Important Notes ##
<p>
  - Before using the IC PAL driver the module clock must be configured. Refer to Clock Manager for clock configuration.
  - The board specific configurations must be done prior to driver after that can call APIs.
  - Some features are not available for all IC IPs and incorrect parameters will be handled by DEV_ASSERT.
</p>
  </p>
@}*/
