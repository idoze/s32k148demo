/**
@defgroup timing_pal Timing - Peripheral Abstraction Layer (TIMING PAL)
@brief The S32 SDK provides a Peripheral Abstraction Layer for timer modules of S32 SDK devices.
<p>
  The TIMING PAL driver allows to generate period event. It was designed to be portable across all
  platforms and IPs which support LPIT, PIT, LPTMR, FTM, STM.
</p>

  ## How to integrate TIMING PAL in your application ##
<p>
  Unlike the other drivers, TIMING PAL modules need to include a configuration
  file named timing_pal_cfg.h, which allows the user to specify which IPs are used.
  The following code example shows how to configure one instance for each
  available TIMING IPs.
</p>

 @code
 #ifndef TIMING_PAL_CFG_H
 #define TIMING_PAL_CFG_H

 /* Define which IP instance will be used in current project */
 #define TIMING_OVER_LPIT
 #define TIMING_OVER_FTM
 #define TIMING_OVER_LPTMR

 #endif /* TIMING_PAL_CFG_H */
 @endcode

 The following table contains the matching between platforms and available IPs
    IP/MCU     |S32K142|S32K144|S32K146|S32K148|S32V234|MPC5748G|MPC5746C|
 -------------:|:-----:|:-----:|:-----:|:-----:|:-----:|:------:|:-------|
 LPIT_TIMING   |  YES  |  YES  |  YES  |  YES  |   NO  |   NO   |   NO   |
 LPTMR_TIMING  |  YES  |  YES  |  YES  |  YES  |   NO  |   NO   |   NO   |
 FTM_TIMING    |  YES  |  YES  |  YES  |  YES  |  YES  |   NO   |   NO   |
 PIT_TIMING    |  NO   |  NO   |  NO   |  NO   |  YES  |  YES   |  YES   |
 STM_TIMING    |  NO   |  NO   |  NO   |  NO   |  YES  |  YES   |  YES   |
<p>

  ## Features ##
   - Start timer channel counting with period in ticks function
   - Generate one-shot or continuous notification(Event)
   - Get elapsed time and remaining time functions
   - Get tick resolution in engineering units (nanosecond, microsecond or millisecond)

  ## Functionality ##

  ### Initialization ###
<p>
  In order to use the TIMING PAL driver it must be first initialized, using TIMING_Init() function.
  Once initialized, it should be de-initialized before initialized again for the same TIMING module instance,
  using TIMING_Deinit(). The initialization function does the following operations:
    - sets the clock source, clock prescaler (except LPIT, PIT_TIMING)
    - sets notification type and callback function of timer channel
  Different TIMING modules instances can function independently of each other.
</p>

  ### Start/Stop a timer channel counting with new period ###
<p>
  After initialization, a timer channel can be started by calling TIMING_StartChannel function.
  The input period unit is ticks, the max value of period depends on which timer is used for timing.
  The TIMING_StartChannel function can be called consecutively, it starts new period immediately but in case LPIT, PIT_TIMING
  when timer channel is running, to abort the current timer channel period and start a timer channel period with a
  new value, the timer channel must be stopped and started again. A timer channel can be stop by calling TIMING_StopChannel function.
</p>

  ### Get elapsed and remaining time ###
<p>
  When a timer channel is running, the elapsed and remaining timer can be got by calling TIMING_GetElapsed and TIMING_GetRemaining
  function. The elapsed and remaining time in nanosecond, microsecond or millisecond is the result of this function
  multiplies by the result of the TIMING_GetResolution.
</p>

  ## Important Notes ##
<p>
  - Before using the TIMING PAL driver the module clock must be configured. Refer to Clock Manager for clock configuration.
  - The driver enables the interrupts for the corresponding TIMING module, but any interrupt priority
    must be done by the application
  - The board specific configurations must be done prior to driver calls
  - Some features are not available for all TIMING IPs and incorrect parameters will be handled by DEV_ASSERT
  - Because of the driver code limit, when use FTM_TIMING or STM_TIMING the executing time of interrupt handler is about 4 microseconds,
    so the erroneous period is about 4 microsecond, should configure period enough to skip this erroneous period.

</p>
  </p>
 ## Example code ##
 @code
  /* Counting variable */
  uint32_t count = 0;

  /* Callback function */
  void My_Callback(void * data)
  {
      *(uint32_t*)data = *(uint32_t*)data + 1U;
  }

  /* Configure timer channel */
  timer_chan_config_t timing_pal1_channelArray[] =
  {
    {
        0,
        TIMER_CHAN_TYPE_CONTINUOUS,
        My_Callback,
        &count
    }
  };

  /* Configure FTM clock source */
  extension_ftm_for_timer_t timing_pal1_ftmExtention =
  {
    FTM_CLOCK_SOURCE_FIXEDCLK,
    FTM_CLOCK_DIVID_BY_1,
    0xFFFF
  };

  /* Configure TIMING instance */
  timer_config_t timing_pal1_InitConfig =
  {
      timing_pal1_channelArray,
      1,
      &timing_pal1_ftmExtention
  };

int main(void)
{
  uint64_t resolution;
  uint32_t elapsedTime;
  /* Initialize TIMING */
  TIMING_Init(INST_TIMING_PAL1, &timing_pal1_InitConfig);

  /* Start channel counting */
  TIMING_StartChannel(INST_TIMING_PAL1, 0, 1000000);

  /* Get elapsed time in ticks */
  elapsedTime = TIMING_GetElapsed(INST_TIMING_PAL1, 0);

  /* Get elapsed time in microsecond */
  TIMING_GetResolution(INST_TIMING_PAL1, TIMER_RESOLUTION_TYPE_MICROSECOND, &resolution);
  elapsedTime = elapsedTime * resolution;

  /* De-initialize TIMING */
  TIMING_Deinit(INST_TIMING_PAL1);
}
 @endcode
@}*/
