/*!

@defgroup pwm_pal  Pulse-width modulation - Peripheral Abstraction Layer (PWM PAL)
@brief The S32 SDK provides a Peripheral Abstraction Layer for the PWM mode.
   <p>
    The PWM PAL driver allows to generate PWM signals. It was designed to be portable across all
    platforms and IPs which support PWM features.
   </p>

   ## How to integrate PWM in your application ##
<p>
  Unlike the other drivers, PWM PAL modules need to include a configuration
  file named pwm_pal_cfg.h, which allows the user to specify which IPSs are used
  and how many resources are allocated for each of them (state structures).
  The following code example shows how to configure one instance for each
  available SPI IPs.

 @code
 #ifndef PWM_PAL_cfg_H
 #define PWM_PAL_cfg_H

 /* Define which IP instance will be used in current project */
 #define PWM_OVER_FTM

 /* Define the resources necessary for current project */
 #define NO_OF_FTM_INSTS_FOR_PWM       1U
 #endif /* PWM_PAL_cfg_H */
 @endcode

 The following table contains the matching between platforms and available IPs
 IP/MCU|S32K142|S32K144|S32K146|S32K148|MPC5748G|MPC5746C|
 -----:|:-----:|:-----:|:-----:|:-----:|:------:|:-------|
 FTM   |  YES  |  YES  |  YES  |  YES  |   NO   |   NO   |
<p>
<p>
  In order to use the PWM PAL driver it must be first initialized it
  using function PWM_Init. Once initialized, it cannot
  be initialized again for the same SPI module instance until it is de-initialized, using
  PWM_Denit. Different SPI module instances can work independently
  of each other.
</p>

<p>
  In each mode (master/slave) are available two types of transfers: blocking and non-blocking.
  The functions which initiate blocking transfers will configure the time out for transmission. If
  time expires SPI_MasterTransferBlocking() or SPI_SlaveTransferBlocking() will return error and the
  transmission will be aborted.
</p>

<p>
  After initialization the duty cycle and pwm period can be updated with these functions: PWM_UpdateDuty and
  PWM_UpdatePeriod. The measurement unit for duty and period is clock ticks, so the application should be aware about
  the clock frequency to the timebase used by PWM channel.
 <p>

 <p>
  Due to hardware limitation period changing for a specific channel can change the period for other
  channels if they share the same timebase. Also, for FTM all channels must have the same period and type.
 <p>

  ## Important Notes ##
 <p>
  - The driver enables the interrupts for the corresponding module, but any interrupt priority
  setting must be done by the application.
  - Due to different hardware features is necessary to use different timebase configuration on each platform.
  </p>
 ## Example code ##
  <p>
  The following code explains how to define the config structures and how to initialize and update duty cycle.
  </p>
 @code
/* Timebase */

pwm_ftm_timebase_t pwm_pal1Timebase =
{
    .sourceClock       = FTM_CLOCK_SOURCE_SYSTEMCLK,
    .prescaler         = FTM_CLOCK_DIVID_BY_1,
    .deadtimePrescaler = FTM_DEADTIME_DIVID_BY_1
};

/* Channels */
pwm_channel_t pwm_pal1Channels[3] =
{
    {
        .channel                       = 0,
        .channelType                   = PWM_EDGE_ALIGNED,
        .period                        = 5000,
        .duty                          = 2500,
        .polarity                      = PWM_ACTIVE_HIGH,
        .insertDeadtime                = false,
        .deadtime                      = 0,
        .enableComplementaryChannel    = false,
        .complementaryChannelPolarity  = PWM_DUPLICATED,
        .timebase                      = &pwm_pal1Timebase
    },
    {
        .channel                       = 1,
        .channelType                   = PWM_EDGE_ALIGNED,
        .period                        = 5000,
        .duty                          = 1000,
        .polarity                      = PWM_ACTIVE_HIGH,
        .insertDeadtime                = false,
        .deadtime                      = 0,
        .enableComplementaryChannel    = false,
        .complementaryChannelPolarity  = PWM_DUPLICATED,
        .timebase                      = &pwm_pal1Timebase
    },
    {
        .channel                       = 2,
        .channelType                   = PWM_EDGE_ALIGNED,
        .period                        = 5000,
        .duty                          = 100,
        .polarity                      = PWM_ACTIVE_HIGH,
        .insertDeadtime                = false,
        .deadtime                      = 0,
        .enableComplementaryChannel    = false,
        .complementaryChannelPolarity  = PWM_DUPLICATED,
        .timebase                      = &pwm_pal1Timebase
    },
};

 /* Initialization configuration */
pwm_global_config_t pwm_pal1Config =
{
    .pwmChannels = pwm_pal1Channels,
    .numberOfPwmChannels = 3
};

bool increaseDutyCycle = true;
uint16_t dutyCycle  =   0;

/* This example doesn't includes pins and clock setup */

PWM_Init(0U, &pwm_pal1Config);

while(1)
{
    if (increaseDutyCycle == false)
    {
        dutyCycle--;
        if (dutyCycle < 1)
            increaseDutyCycle = true;
    }
    else
    {
        dutyCycle++;
        if (dutyCycle > 5000)
            increaseDutyCycle = false;
    }
    /* Update PWM channels */
   PWM_UpdateDuty(0, 0,dutyCycle);
}


 @endcode
@}*/
